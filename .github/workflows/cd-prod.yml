name: CD to Production (on main)

on:
  push:
    branches: [main]

jobs:
  deploy_prod:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Ensure prod RG
        run: az group create -n ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} -l australiaeast

      # ---- ACR creds (for docker login + ACI pulls) ----
      - name: Enable ACR admin & fetch creds
        id: acr
        run: |
          az acr update -n ${{ secrets.ACR_NAME }} --admin-enabled true
          USER=$(az acr credential show -n ${{ secrets.ACR_NAME }} --query username -o tsv)
          PASS=$(az acr credential show -n ${{ secrets.ACR_NAME }} --query 'passwords[0].value' -o tsv)
          echo "username=$USER"  >> $GITHUB_OUTPUT
          echo "password=$PASS"  >> $GITHUB_OUTPUT

      - name: Docker login to ACR
        run: echo "${{ steps.acr.outputs.password }}" | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u "${{ steps.acr.outputs.username }}" --password-stdin

      # ---- build & push images tagged with commit SHA ----
      - name: Build images (tag=${GITHUB_SHA})
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/frontend:${GITHUB_SHA}          ./frontend
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/customer_service:${GITHUB_SHA}  ./backend/customer_service
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/order_service:${GITHUB_SHA}     ./backend/order_service
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/product_service:${GITHUB_SHA}   ./backend/product_service

      - name: Push images
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/frontend:${GITHUB_SHA}
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/customer_service:${GITHUB_SHA}
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/order_service:${GITHUB_SHA}
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/product_service:${GITHUB_SHA}

      # ---- deploy/replace ACI containers (Linux) ----
      - name: Upsert customer_service
        run: |
          TAG=${GITHUB_SHA}
          az container show -g ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} -n prod-customer >/dev/null 2>&1 && \
            az container delete -y -g ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} -n prod-customer
          az container create -g ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} -n prod-customer \
            --image ${{ secrets.ACR_LOGIN_SERVER }}/customer_service:$TAG \
            --registry-login-server ${{ secrets.ACR_LOGIN_SERVER }} \
            --registry-username ${{ steps.acr.outputs.username }} \
            --registry-password ${{ steps.acr.outputs.password }} \
            --os-type Linux --ports 8001 --ip-address Public --cpu 1 --memory 1

      - name: Upsert order_service
        run: |
          TAG=${GITHUB_SHA}
          az container show -g ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} -n prod-order >/dev/null 2>&1 && \
            az container delete -y -g ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} -n prod-order
          az container create -g ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} -n prod-order \
            --image ${{ secrets.ACR_LOGIN_SERVER }}/order_service:$TAG \
            --registry-login-server ${{ secrets.ACR_LOGIN_SERVER }} \
            --registry-username ${{ steps.acr.outputs.username }} \
            --registry-password ${{ steps.acr.outputs.password }} \
            --os-type Linux --ports 8002 --ip-address Public --cpu 1 --memory 1

      - name: Upsert product_service
        run: |
          TAG=${GITHUB_SHA}
          az container show -g ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} -n prod-product >/dev/null 2>&1 && \
            az container delete -y -g ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} -n prod-product
          az container create -g ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} -n prod-product \
            --image ${{ secrets.ACR_LOGIN_SERVER }}/product_service:$TAG \
            --registry-login-server ${{ secrets.ACR_LOGIN_SERVER }} \
            --registry-username ${{ steps.acr.outputs.username }} \
            --registry-password ${{ steps.acr.outputs.password }} \
            --os-type Linux --ports 8003 --ip-address Public --cpu 1 --memory 1

      - name: Upsert frontend
        run: |
          TAG=${GITHUB_SHA}
          az container show -g ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} -n prod-frontend >/dev/null 2>&1 && \
            az container delete -y -g ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} -n prod-frontend
          az container create -g ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} -n prod-frontend \
            --image ${{ secrets.ACR_LOGIN_SERVER }}/frontend:$TAG \
            --registry-login-server ${{ secrets.ACR_LOGIN_SERVER }} \
            --registry-username ${{ steps.acr.outputs.username }} \
            --registry-password ${{ steps.acr.outputs.password }} \
            --os-type Linux --ports 80 --ip-address Public --cpu 1 --memory 1

      - name: Output prod URL
        run: |
          IP=$(az container show -g ${{ secrets.AZURE_RESOURCE_GROUP_PROD }} -n prod-frontend --query ipAddress.ip -o tsv)
          echo "Prod URL: http://$IP"
